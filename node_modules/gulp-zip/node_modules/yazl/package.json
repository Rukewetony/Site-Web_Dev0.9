{
  "name": "yazl",
  "version": "2.2.2",
  "description": "yet another zip library for node",
  "main": "index.js",
  "scripts": {
    "test": "node test/test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/thejoshwolfe/yazl.git"
  },
  "keywords": [
    "zip",
    "stream",
    "archive",
    "file"
  ],
  "author": {
    "name": "Josh Wolfe",
    "email": "thejoshwolfe@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/thejoshwolfe/yazl/issues"
  },
  "homepage": "https://github.com/thejoshwolfe/yazl",
  "dependencies": {
    "buffer-crc32": "~0.2.3"
  },
  "devDependencies": {
    "bl": "~0.9.3",
    "yauzl": "~2.0.0"
  },
  "readme": "# yazl\n\nyet another zip library for node. For unzipping, see\n[yauzl](https://github.com/thejoshwolfe/yauzl).\n\nDesign principles:\n\n * Don't block the JavaScript thread.\n   Use and provide async APIs.\n * Keep memory usage under control.\n   Don't attempt to buffer entire files in RAM at once.\n * Prefer to open input files one at a time than all at once.\n   This is slightly suboptimal for time performance,\n   but avoids OS-imposed limits on the number of simultaneously open file handles.\n\n## Usage\n\n```js\nvar yazl = require(\"yazl\");\n\nvar zipfile = new yazl.ZipFile();\nzipfile.addFile(\"file1.txt\", \"file1.txt\");\n// (add only files, not directories)\nzipfile.addFile(\"path/to/file.txt\", \"path/in/zipfile.txt\");\n// pipe() can be called any time after the constructor\nzipfile.outputStream.pipe(fs.createWriteStream(\"output.zip\")).on(\"close\", function() {\n  console.log(\"done\");\n});\n// alternate apis for adding files:\nzipfile.addReadStream(process.stdin, \"stdin.txt\", {\n  mtime: new Date(),\n  mode: 0100664, // -rw-rw-r--\n});\nzipfile.addBuffer(new Buffer(\"hello\"), \"hello.txt\", {\n  mtime: new Date(),\n  mode: 0100664, // -rw-rw-r--\n});\n// call end() after all the files have been added\nzipfile.end();\n```\n\n## API\n\n### Class: ZipFile\n\n#### new ZipFile()\n\nNo parameters.\nNothing can go wrong.\n\n#### addFile(realPath, metadataPath, [options])\n\nAdds a file from the file system at `realPath` into the zipfile as `metadataPath`.\nTypically `metadataPath` would be calculated as `path.relative(root, realPath)`.\nUnzip programs would extract the file from the zipfile as `metadataPath`.\n`realPath` is not stored in the zipfile.\n\nA valid `metadataPath` must not be blank, must not start with `\"/\"` or `/[A-Za-z]:\\//`,\nand must not contain `\"\\\\\"` or `\"..\"` path segments.\nFile paths must not end with `\"/\"`.\n\n`options` may be omitted or null and has the following structure and default values:\n\n```js\n{\n  mtime: stats.mtime,\n  mode: stats.mode,\n  compress: true,\n}\n```\n\nUse `options.mtime` and/or `options.mode` to override the values\nthat would normally be obtained by the `fs.Stats` for the `realPath`.\nThe mode is the unix permission bits and file type.\nThe mtime and mode are stored in the zip file in the fields \"last mod file time\",\n\"last mod file date\", and \"external file attributes\".\nyazl does not store group and user ids in the zip file.\n\nInternally, `fs.stat()` is called immediately in the `addFile` function,\nand `fs.createReadStream()` is used later when the file data is actually required.\nThroughout adding and encoding `n` files with `addFile()`,\nthe number of simultaneous open files is `O(1)`, probably just 1 at a time.\n\n#### addReadStream(readStream, metadataPath, [options])\n\nAdds a file to the zip file whose content is read from `readStream`.\nSee `addFile()` for info about the `metadataPath` parameter.\n`options` may be omitted or null and has the following structure and default values:\n\n```js\n{\n  mtime: new Date(),\n  mode: 0100664,\n  compress: true,\n  size: 12345, // example value\n}\n```\n\nSee `addFile()` for the meaning of `mtime` and `mode`.\nIf `size` is given, it will be checked against the actual number of bytes in the `readStream`,\nand an error will be emitted if there is a mismatch.\n\nNote that yazl will `.pipe()` data from `readStream`, so be careful using `.on('data')`.\nIn certain versions of node, `.on('data')` makes `.pipe()` behave incorrectly.\n\n#### addBuffer(buffer, metadataPath, [options])\n\nAdds a file to the zip file whose content is `buffer`.\nSee `addFile()` for info about the `metadataPath` parameter.\n`options` may be omitted or null and has the following structure and default values:\n\n```js\n{\n  mtime: new Date(),\n  mode: 0100664,\n  compress: true,\n}\n```\n\nSee `addFile()` for the meaning of `mtime` and `mode`.\n\nThis method has the unique property that General Purpose Bit `3` will not be used in the Local File Header.\nThis doesn't matter for unzip implementations that conform to the Zip File Spec.\nHowever, 7-Zip 9.20 has a known bug where General Purpose Bit `3` is declared an unsupported compression method\n(note that it really has nothing to do with the compression method.).\nSee [issue #11](https://github.com/thejoshwolfe/yazl/issues/11).\nIf you would like to create zip files that 7-Zip 9.20 can understand,\nyou must use `addBuffer()` instead of `addFile()` or `addReadStream()` for all entries in the zip file\n(and `addEmptyDirectory()` is fine too).\n\n#### addEmptyDirectory(metadataPath, [options])\n\nAdds an entry to the zip file that indicates a directory should be created,\neven if no other items in the zip file are contained in the directory.\nThis method is only required if the zip file is intended to contain an empty directory.\n\nSee `addFile()` for info about the `metadataPath` parameter.\nIf `metadataPath` does not end with a `\"/\"`, a `\"/\"` will be appended.\n\n`options` may be omitted or null and has the following structure and default values:\n\n```js\n{\n  mtime: new Date(),\n  mode: 040775,\n}\n```\n\nSee `addFile()` for the meaning of `mtime` and `mode`.\n\n#### end([finalSizeCallback])\n\nIndicates that no more files will be added via `addFile()`, `addReadStream()`, or `addBuffer()`.\nSome time after calling this function, `outputStream` will be ended.\n\nIf specified and non-null, `finalSizeCallback` is given the parameters `(finalSize)`\nsometime during or after the call to `end()`.\n`finalSize` is of type `Number` and can either be `-1`\nor the guaranteed eventual size in bytes of the output data that can be read from `outputStream`.\n\nIf `finalSize` is `-1`, it means means the final size is too hard to guess before processing the input file data.\nThis will happen if and only if the `compress` option is `true` on any call to `addFile()`, `addReadStream()`, or `addBuffer()`,\nor if `addReadStream()` is called and the optional `size` option is not given.\nIn other words, clients should know whether they're going to get a `-1` or a real value\nby looking at how they are calling this function.\n\nThe call to `finalSizeCallback` might be delayed if yazl is still waiting for `fs.Stats` for an `addFile()` entry.\nIf `addFile()` was never called, `finalSizeCallback` will be called during the call to `end()`.\nIt is not required to start piping data from `outputStream` before `finalSizeCallback` is called.\n`finalSizeCallback` will be called only once, and only if this is the first call to `end()`.\n\n#### outputStream\n\nA readable stream that will produce the contents of the zip file.\nIt is typical to pipe this stream to a writable stream created from `fs.createWriteStream()`.\n\nInternally, large amounts of file data are piped to `outputStream` using `pipe()`,\nwhich means throttling happens appropriately when this stream is piped to a slow destination.\n\nData becomes available in this stream soon after calling one of `addFile()`, `addReadStream()`, or `addBuffer()`.\nClients can call `pipe()` on this stream at any time,\nsuch as immediately after getting a new `ZipFile` instance, or long after calling `end()`.\n\nAs a reminder, be careful using both `.on('data')` and `.pipe()` with this stream.\nIn certain versions of node, you cannot use both `.on('data')` and `.pipe()` successfully.\n\n### dateToDosDateTime(jsDate)\n\n`jsDate` is a `Date` instance.\nReturns `{date: date, time: time}`, where `date` and `time` are unsigned 16-bit integers.\n\n## Output Structure\n\nThe Zip File Spec leaves a lot of flexibility up to the zip file creator.\nThis section explains and justifies yazl's interpretation and decisions regarding this flexibility.\n\nThis section is probably not useful to yazl clients,\nbut may be interesting to unzip implementors and zip file enthusiasts.\n\n### Disk Numbers\n\nAll values related to disk numbers are `0`,\nbecause yazl has no multi-disk archive support.\n\n### Version Made By\n\nAlways `0x031e`.\nThis is the value reported by a Linux build of Info-Zip.\nInstead of experimenting with different values of this field\nto see how different unzip clients would behave,\nyazl mimics Info-Zip, which should work everywhere.\n\nNote that the top byte means \"UNIX\"\nand has implications in the External File Attributes.\n\n### Version Needed to Extract\n\nAlways `0x0014`.\nWithout this value, Info-Zip, and possibly other unzip implementations,\nrefuse to acknowledge General Purpose Bit `8`, which enables utf8 filename encoding.\n\n### General Purpose Bit Flag\n\nBit `8` is always set.\nFilenames are always encoded in utf8, even if the result is indistinguishable from ascii.\n\nBit `3` is usually set in the Local File Header.\nTo support both a streaming input and streaming output api,\nit is impossible to know the crc32 before processing the file data.\nWhen bit `3` is set, file Descriptors are given after each file data with this information, as per the spec.\nBut remember a complete metadata listing is still always available in the central directory record,\nso if unzip implementations are relying on that, like they should,\nnone of this paragraph will matter anyway.\nEven so, some popular unzip implementations do not follow the spec.\nMac's Archive Utility requires File Descriptors to include the optional signature,\nso yazl includes the optional file descriptor signature.\nWhen bit `3` is not used, Mac's Archive Utility requires there to be no file descriptor, so yazl skips it in that case.\nAdditionally, 7-Zip 9.20 does not seem to support bit `3` at all\n(see [issue #11](https://github.com/thejoshwolfe/yazl/issues/11)).\n\nAll other bits are unset.\n\n### Internal File Attributes\n\nAlways `0`.\nThe \"apparently an ASCII or text file\" bit is always unset meaning \"apparently binary\".\nThis kind of determination is outside the scope of yazl,\nand is probably not significant in any modern unzip implementation.\n\n### External File Attributes\n\nAlways `stats.mode << 16`.\nThis is apparently the convention for \"version made by\" = `0x03xx` (UNIX).\n\nNote that for directory entries (see `addEmptyDirectory()`),\nit is conventional to use the lower 8 bits for the MS-DOS directory attribute byte.\nHowever, the spec says this is only required if the Version Made By is DOS,\nso this library does not do that.\n\n### Directory Entries\n\nWhen adding a `metadataPath` such as `\"parent/file.txt\"`, yazl does not add a directory entry for `\"parent/\"`,\nbecause file entries imply the need for their parent directories.\nUnzip clients seem to respect this style of pathing,\nand the zip file spec does not specify what is standard in this regard.\n\nIn order to create empty directories, use `addEmptyDirectory()`.\n\n## Change History\n\n * 2.2.2\n   * Fix 7-Zip compatibility issue. [pull request #17](https://github.com/thejoshwolfe/yazl/pull/17)\n * 2.2.1\n   * Fix Mac Archive Utility compatibility issue. [issue #14](https://github.com/thejoshwolfe/yazl/issues/14)\n * 2.2.0\n   * Avoid using general purpose bit 3 for `addBuffer()` calls. [issue #13](https://github.com/thejoshwolfe/yazl/issues/13)\n * 2.1.3\n   * Fix bug when only addBuffer() and end() are called. [issue #12](https://github.com/thejoshwolfe/yazl/issues/12)\n * 2.1.2\n   * Fixed typo in parameter validation. [pull request #10](https://github.com/thejoshwolfe/yazl/pull/10)\n * 2.1.1\n   * Fixed stack overflow when using addBuffer() in certain ways. [issue #9](https://github.com/thejoshwolfe/yazl/issues/9)\n * 2.1.0\n   * Added `addEmptyDirectory()`.\n   * `options` is now optional for `addReadStream()` and `addBuffer()`.\n * 2.0.0\n   * Initial release.\n",
  "readmeFilename": "README.md",
  "_id": "yazl@2.2.2",
  "_from": "yazl@^2.1.0"
}
